{"version":3,"sources":["../src/index.ts","../src/controllers/auth.controller.ts","../src/schema/user.schema.ts","../src/schema/http.schema.ts","../src/env.ts","../src/db/index.ts","../src/db/schema/account.schema.ts","../src/db/schema/users.schema.ts","../src/db/schema/jwks.schema.ts","../src/db/schema/session.schema.ts","../src/db/schema/verifications.schema.ts","../src/db/schema/index.ts","../src/utils/jwt.ts","../src/auth.ts","../src/controllers/user.controller.ts"],"sourcesContent":["import { Elysia } from 'elysia'\nimport { authController } from '@/controllers/auth.controller.ts'\nimport { node } from '@elysiajs/node'\nimport { env } from './env.ts'\nimport { auth, OpenAPI } from './auth.ts'\nimport { openapi } from '@elysiajs/openapi'\nimport { userController } from './controllers/user.controller.ts'\n\nconst app = new Elysia({ prefix: '/api', adapter: node() })\n  .use(\n    openapi({\n      documentation: {\n        components: await OpenAPI.components,\n        paths: await OpenAPI.getPaths(),\n      },\n    })\n  )\n  .use(authController)\n  .use(userController)\n  .mount(auth.handler)\n  .get('/', () => 'Hello Elysia')\n  .listen(env.PORT)\n\nconsole.log(`ðŸ¦Š Elysia is running at ${'localhost'}:${env.PORT}`)\n","import { Elysia } from 'elysia'\nimport { httpSchema, loginSchema } from '@/schema/index.ts'\nimport { db } from '@/db/index.ts'\nimport { schema } from '@/db/schema/index.ts'\nimport { eq } from 'drizzle-orm'\nimport { compare } from 'bcrypt'\nimport { sign } from '@/utils/jwt.ts'\nimport { z } from 'zod'\n\nexport const authController = new Elysia({ prefix: '/auth' }).post(\n  '/token',\n  async ({ body, status }) => {\n    const [user] = await db\n      .select({\n        id: schema.users.id,\n        email: schema.users.email,\n        password: schema.accounts.password,\n      })\n      .from(schema.users)\n      .innerJoin(schema.accounts, eq(schema.accounts.userId, schema.users.id))\n      .where(eq(schema.users.email, body.email))\n\n    if (!user) {\n      return\n    }\n    if (!(await compare(String(user.password), body.password))) {\n      return\n    }\n    const data = await sign({\n      sub: user.id,\n      iat: Math.floor(Date.now() / 1000),\n    })\n    return status(201, {\n      statusCode: 201,\n      error: null,\n      message: 'UsuÃ¡rio logado com sucesso',\n      data,\n    })\n  },\n  {\n    body: loginSchema,\n    tags: ['auth'],\n    response: {\n      201: httpSchema.extend({\n        data: z.object({\n          accessToken: z.jwt(),\n          refreshToken: z.jwt(),\n        }),\n      }),\n      409: httpSchema,\n      500: httpSchema,\n    },\n  }\n)\n","import { z } from 'zod'\n\nexport const loginSchema = z.object({\n  email: z.email(),\n  password: z\n    .string()\n    .min(8, { error: 'A senha deve conter no mÃ­nimo 8 caracteres' }),\n})\n\nexport const userSchema = z\n  .object({\n    name: z.string().min(1, {\n      message: 'O username deve ter pelo menos 1 caracteres',\n    }),\n    email: z.string().email({ message: 'O email deve ser valido' }),\n    password: z.string().min(8, {\n      message: 'A senha deve ter pelo menos 8 caracteres',\n    }),\n  })\n  .extend({\n    confirmPassword: z\n      .string()\n      .min(8, { message: 'A senha deve ter pelo menos 8 caracteres' }),\n  })\n  .refine(({ password, confirmPassword }) => password === confirmPassword, {\n    message: 'As senhas devem ser iguais',\n    path: ['confirmPassword'],\n  })\n","import { z } from 'zod'\n\nexport const httpSchema = z.object({\n  statusCode: z.number(),\n  error: z.string().nullable(),\n  message: z.string(),\n})\n","import { z } from 'zod'\n\nexport const envSchema = z.object({\n  NODE_ENV: z\n    .enum(['development', 'test', 'production'])\n    .default('development'),\n  DATABASE_URL: z.url().startsWith('postgresql://'),\n  PORT: z.coerce.number().default(3000),\n  BETTER_AUTH_SECRET: z.string(),\n  EXPIRES_IN: z.string(),\n  REFRESH_EXPIRES_IN: z.string(),\n  //   SERVER_URL: z.string(),\n  //   EMAIL: z.string(),\n  //   GOOGLE_CLIENT_ID: z.string(),\n  //   GOOGLE_CLIENT_KEY: z.string(),\n\n  //   REFRESH_TOKEN: z.string(),\n})\n\nexport const env = envSchema.parse(process.env)\n","import { env } from '@/env.ts'\nimport { drizzle } from 'drizzle-orm/node-postgres'\nimport { schema } from '@/db/schema/index.ts'\nexport const db = drizzle(env.DATABASE_URL, { schema, casing: 'snake_case' })\n","import { pgTable, text, timestamp } from 'drizzle-orm/pg-core'\nimport { users } from './users.schema.ts'\n\nexport const accounts = pgTable('accounts', {\n  id: text('id').primaryKey(),\n  accountId: text('account_id').notNull(),\n  providerId: text('provider_id').notNull(),\n  userId: text('user_id')\n    .notNull()\n    .references(() => users.id, { onDelete: 'cascade' }),\n  accessToken: text('access_token'),\n  refreshToken: text('refresh_token'),\n  idToken: text('id_token'),\n  accessTokenExpiresAt: timestamp('access_token_expires_at'),\n  refreshTokenExpiresAt: timestamp('refresh_token_expires_at'),\n  scope: text('scope'),\n  password: text('password'),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at')\n    .$onUpdate(() => /* @__PURE__ */ new Date())\n    .notNull(),\n})\n","import { pgTable, text, timestamp, boolean } from 'drizzle-orm/pg-core'\n\nexport const users = pgTable('users', {\n  id: text('id').primaryKey(),\n  name: text('name').notNull(),\n  email: text('email').notNull().unique(),\n  emailVerified: boolean('email_verified').default(false).notNull(),\n  image: text('image'),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at')\n    .defaultNow()\n    .$onUpdate(() => /* @__PURE__ */ new Date())\n    .notNull(),\n  role: text('role'),\n  banned: boolean('banned').default(false),\n  banReason: text('ban_reason'),\n  banExpires: timestamp('ban_expires'),\n})\n","import { pgTable, text, timestamp } from 'drizzle-orm/pg-core'\n\nexport const jwkss = pgTable('jwkss', {\n  id: text('id').primaryKey(),\n  publicKey: text('public_key').notNull(),\n  privateKey: text('private_key').notNull(),\n  createdAt: timestamp('created_at').notNull(),\n})\n","import { pgTable, text, timestamp } from 'drizzle-orm/pg-core'\nimport { users } from './users.schema.ts'\n\nexport const sessions = pgTable('sessions', {\n  id: text('id').primaryKey(),\n  expiresAt: timestamp('expires_at').notNull(),\n  token: text('token').notNull().unique(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at')\n    .$onUpdate(() => /* @__PURE__ */ new Date())\n    .notNull(),\n  ipAddress: text('ip_address'),\n  userAgent: text('user_agent'),\n  userId: text('user_id')\n    .notNull()\n    .references(() => users.id, { onDelete: 'cascade' }),\n  impersonatedBy: text('impersonated_by'),\n})\n","import { pgTable, text, timestamp } from 'drizzle-orm/pg-core'\n\nexport const verifications = pgTable('verifications', {\n  id: text('id').primaryKey(),\n  identifier: text('identifier').notNull(),\n  value: text('value').notNull(),\n  expiresAt: timestamp('expires_at').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at')\n    .defaultNow()\n    .$onUpdate(() => /* @__PURE__ */ new Date())\n    .notNull(),\n})\n","import { accounts } from './account.schema.ts'\nimport { jwkss } from './jwks.schema.ts'\nimport { sessions } from './session.schema.ts'\nimport { users } from './users.schema.ts'\nimport { verifications } from './verifications.schema.ts'\n\nexport const schema = {\n  users,\n  sessions,\n  jwkss,\n  verifications,\n  accounts,\n}\n","import { env } from '@/env.ts'\nimport { type JWTPayload, jwtVerify, SignJWT } from 'jose'\n// import type { JWTPayloadInput, JWTPayloadSpec } from \"@elysiajs/jwt\";\n// import { JWTPayload, SignJWT, type JWTVerifyOptions } from \"jose\";\n\n// type AllowClaimValue = string | number | boolean | null | undefined | AllowClaimValue[] | {\n//     [key: string]: AllowClaimValue;\n// };\n// type ClaimType = Record<string, AllowClaimValue>;\n\n// type NormalizedClaim = 'nbf' | 'exp' | 'iat';\n\n// type JWT = {\n//     jwt: {\n//         sign(signValue: Omit<ClaimType, NormalizedClaim> & JWTPayloadInput): Promise<string>;\n//         verify(jwt?: string, options?: JWTVerifyOptions): Promise<false | (ClaimType & Omit<JWTPayloadSpec, never>)>;\n//     }\n// }\nconst secret = Buffer.from(env.BETTER_AUTH_SECRET, 'base64')\n\nexport async function sign(payload: JWTPayload) {\n  const accessToken = await new SignJWT({\n    exp: Math.floor(Date.now() / 1000) + 3600,\n    ...payload,\n    type: 'access',\n  })\n    .setProtectedHeader({ alg: 'HS256' })\n    .setIssuedAt()\n    .setExpirationTime(env.EXPIRES_IN)\n    .sign(secret)\n\n  const refreshToken = await new SignJWT({\n    exp: Math.floor(Date.now() / 1000) + 86400,\n    ...payload,\n    type: 'refresh',\n  })\n    .setProtectedHeader({ alg: 'HS256' })\n    .setIssuedAt()\n    .setExpirationTime(env.REFRESH_EXPIRES_IN)\n    .sign(secret)\n\n  return { refreshToken, accessToken }\n}\n\nexport async function verify(token: string) {\n  try {\n    const { payload } = await jwtVerify(token, secret)\n    return payload\n  } catch (error) {\n    throw new Error('Token invÃ¡lido ou expirado')\n  }\n}\n","import { betterAuth } from 'better-auth'\nimport { drizzleAdapter } from 'better-auth/adapters/drizzle'\nimport { admin, jwt, openAPI } from 'better-auth/plugins'\nimport { db } from './db/index.ts'\nimport { env } from './env.ts'\nimport { hash, compare } from 'bcrypt'\nimport { randomInt } from 'node:crypto'\n\nexport const auth = betterAuth({\n  secret: env.BETTER_AUTH_SECRET,\n  basePath: '/auth',\n  database: drizzleAdapter(db, {\n    provider: 'pg',\n    usePlural: true,\n  }),\n  emailAndPassword: {\n    enabled: true,\n    autoSignIn: false,\n    password: {\n      hash: (password: string) => hash(password, randomInt(10, 16)),\n      verify: ({ password, hash }) => compare(password, hash),\n    },\n  },\n  disabledPaths: [\n    '/token', // desabilita o endpoint /api/auth/token (basePath + /token)\n  ],\n  plugins: [\n    jwt({\n      disableSettingJwtHeader: true,\n    }),\n    openAPI(),\n    admin(),\n  ],\n})\n\nlet _schema: ReturnType<typeof auth.api.generateOpenAPISchema>\nconst getSchema = async () => (_schema ??= auth.api.generateOpenAPISchema())\n\nexport const OpenAPI = {\n  getPaths: (prefix = '/auth/api') =>\n    getSchema().then(({ paths }) => {\n      const reference: typeof paths = Object.create(null)\n\n      for (const path of Object.keys(paths)) {\n        const key = prefix + path\n        reference[key] = paths[path]\n\n        for (const method of Object.keys(paths[path])) {\n          const operation = (reference[key] as any)[method]\n\n          operation.tags = ['Better Auth']\n        }\n      }\n\n      return reference\n    }) as Promise<any>,\n  components: getSchema().then(({ components }) => components) as Promise<any>,\n} as const\n","import { auth } from '@/auth.ts'\nimport { db } from '@/db/index.ts'\nimport { schema } from '@/db/schema/index.ts'\nimport { httpSchema } from '@/schema/http.schema.ts'\nimport { userSchema } from '@/schema/user.schema.ts'\nimport { eq } from 'drizzle-orm'\nimport { Elysia } from 'elysia'\n\nexport const userController = new Elysia({ prefix: '/user' }).post(\n  '',\n  async ({ body, status }) => {\n    const userExists = await db\n      .select({\n        id: schema.users.id,\n        email: schema.users.email,\n      })\n      .from(schema.users)\n      .where(eq(schema.users.email, body.email))\n    if (userExists) {\n      return status(409, {\n        statusCode: 500,\n        error: 'CONFLIT',\n        message: 'UsuÃ¡rio jÃ¡ existente',\n      })\n    }\n    try {\n      const user = await auth.api.createUser({\n        body: {\n          ...body,\n          role: 'user',\n        },\n      })\n      return status(201, {\n        statusCode: 201,\n        error: null,\n        message: 'UsuÃ¡rio criado com sucesso',\n      })\n    } catch (error) {\n      return status(500, {\n        statusCode: 500,\n        error: 'INTERNAL SERVER ERROR',\n        message: 'Erro interno no servidor',\n      })\n    }\n  },\n  {\n    body: userSchema,\n    response: {\n      201: httpSchema,\n      409: httpSchema,\n      500: httpSchema,\n    },\n  }\n)\n"],"mappings":"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","names":["Elysia","z","z","pgTable","text","timestamp","pgTable","text","timestamp","pgTable","text","timestamp","pgTable","text","timestamp","pgTable","text","timestamp","pgTable","text","timestamp","z","compare","hash","eq","Elysia","Elysia"]}